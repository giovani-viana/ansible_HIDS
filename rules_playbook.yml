- name: Obter lista de IPs da API e aplicar regras de mitigação
  hosts: localhost
  gather_facts: false
  vars:
    api_url: "http://164.72.15.30:5050/dados/ataques/novos"
    api_retries: 3
    target_ips: "{{ target_ips }}"
    flow_ids: "{{ flow_ids }}"
    access_token: "{{ access_token }}"

  tasks:
    - name: Verificar valor da api_url
      debug:
        var: api_url

    - name: Verificar variáveis obrigatórias
      fail:
        msg: "As variáveis target_ips, flow_ids ou access_token não estão definidas."
      when: target_ips is not defined or flow_ids is not defined or access_token is not defined

    - name: Verificar variáveis recebidas
      debug:
        msg:
          - "target_ips: {{ target_ips }}"
          - "flow_ids: {{ flow_ids }}"
          - "access_token: {{ access_token }}"

    - name: Obter lista de IPs da API
      uri:
        url: "{{ api_url }}"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
        return_content: yes
        timeout: 30
        status_code: 200
      register: api_response
      retries: "{{ api_retries }}"
      delay: 5
      until: api_response.status == 200

    - name: Debug resposta da API
      debug:
        var: api_response

    - name: Verificar se a API retornou os IPs
      fail:
        msg: "A API não retornou uma lista de IPs válida."
      when: api_response.json.dados is not defined or api_response.json.dados|length == 0

    - name: Debug lista de IPs recebida da API
      debug:
        var: api_response.json.dados

    - name: Validar formato dos IPs
      fail:
        msg: "IP inválido encontrado: {{ item }}"
      when: not item is match('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')
      loop: "{{ api_response.json.dados }}"

    - name: Debug IPs validados
      debug:
        msg: "IP validado: {{ item }}"
      loop: "{{ api_response.json.dados }}"

    - name: Criar grupo dinâmico de hosts com base nos IPs retornados
      add_host:
        name: "{{ item }}"
        groups: dynamic_hosts
      loop: "{{ api_response.json.dados }}"
      when: not dry_run

    - name: Debug hosts dinâmicos criados
      debug:
        msg: "Hosts dinâmicos: {{ groups['dynamic_hosts'] | default([]) }}"

    - name: Criar lista de IPs
      set_fact:
        ip_list: "{{ target_ips.split(',') }}"

    - name: Mostrar inventário dinâmico
      debug:
        var: groups['dynamic_hosts']

- name: Aplicar regras de mitigação nos hosts dinâmicos
  hosts: dynamic_hosts
  become: true
  vars:
    script_to_run: "block_https"
    dry_run: false

  tasks:
    - name: Testar conectividade SSH
      ping:
      register: ping_result

    - name: Debug resultado do ping
      debug:
        var: ping_result

    - name: Verificar existência do script block_https.sh
      stat:
        path: ./scripts/block_https.sh
      register: block_https_stat

    - name: Debug stat do script block_https.sh
      debug:
        var: block_https_stat

    - name: Block HTTPS
      script: ./scripts/block_https.sh
      register: resultado_block_https
      when: script_to_run == "block_https" and not dry_run

    - name: Resultado do script Block HTTPS
      debug:
        var: resultado_block_https

    - name: Log de execução
      debug:
        msg: "Execução concluída para o host {{ inventory_hostname }}"
      when: not dry_run